buildscript {
    ext.kotlinVersion = '1.2.51'
    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
    }
}

subprojects {
    group 'com.kotcrab.fate'
    version = '1.0.0-SNAPSHOT'
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'kotlin'

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "https://oss.sonatype.org/content/repositories/releases/" }
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile) {
        kotlinOptions {
            jvmTarget = "1.8"
        }
    }
}

kotlin { experimental { coroutines 'enable' } }

project(':common') {
    dependencies {
        compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
        compile "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
        compile "org.jetbrains.kotlinx:kotlinx-coroutines-core:0.21.2"
        compile "com.kotcrab.kmips:kmips:1.2"
        compile "com.google.guava:guava:19.0"
        compile "com.google.code.gson:gson:2.8.0"
        compile "org.apache.commons:commons-exec:1.3"
    }
}

project(':fate') {
    apply plugin: 'application'
    mainClassName = "com.kotcrab.fate.cli.FateCli"
    dependencies {
        compile project(":common")
        compile "com.github.rvesse:airline:2.2.0"
    }

    task createWrappers {
        def extraDir = file("$buildDir/distExtra")
        outputs.dir extraDir
        doLast {
            extraDir.mkdirs()
            new File(extraDir, "fate.bat").write('@echo off\r\n' +
                    'call "%~dp0/bin/fate.bat" %*')
            new File(extraDir, "pktools.bat").write('@echo off\r\n' +
                    'call "%~dp0/bin/pktools.bat" %*')
            new File(extraDir, "drag-and-drop pk extract.bat").write('@echo off\r\n' +
                    'call "%~dp0/bin/pktools.bat" extractDnD "%~1"\r\n' +
                    'echo Operation finished, press any key to close this window...\r\n' +
                    'pause>nul')
        }
    }

    task copyPythonScripts {
        def extraDir = file("$buildDir/distPythonExtra")
        outputs.dir extraDir
        doLast {
            extraDir.mkdirs()
            copy {
                from "$rootDir/python/blender/import_mtb.py"
                from "$rootDir/python/noesis/data_fate_extella.py"
                into extraDir
            }
        }
    }

    task buildAnimServ(type: Exec) {
        commandLine "MSBuild", "$rootDir/native/animserv/animserv.sln",
                "/property:Configuration=Release", "/property:Platform=x64"
    }

    task copyAnimServ(dependsOn: ['buildAnimServ']) {
        def extraDir = file("$buildDir/distAnimServExtra")
        outputs.dir extraDir
        doLast {
            extraDir.mkdirs()
            copy {
                from "$rootDir/native/animserv/x64/Release/animserv.exe"
                from "$rootDir/native/animserv/x64/Release/animserv.dll"
                from "$rootDir/native/animserv/license-3rd.txt"
                into extraDir
            }
        }
    }

    task copyLicense {
        def extraDir = file("$buildDir/distDocsExtra")
        outputs.dir extraDir
        doLast {
            extraDir.mkdirs()
            def licenseFile = new File(extraDir, "license")
            licenseFile.delete()
            licenseFile << new File(rootDir, "LICENSE").text
            licenseFile << new File(rootDir, "license-3rd").text
        }
    }

    task pkToolsStartScript(type: CreateStartScripts) {
        mainClassName = "com.kotcrab.fate.cli.PkToolsCli"
        applicationDefaultJvmArgs = ["-Dfile.encoding=UTF-8"]
        applicationName = "pktools"
        outputDir = new File(project.buildDir, 'scripts')
        classpath = jar.outputs.files + project.configurations.runtime
    }
    startScripts.dependsOn pkToolsStartScript

    distributions {
        main {
            contents {
                from(createWrappers)
                from(copyLicense)
                from(copyPythonScripts) {
                    into "python"
                }
                from(copyAnimServ) {
                    into "animserv"
                }
            }
        }
    }
}

project(':nanoha') {
    apply plugin: 'application'
    applicationName = 'nanoha-script-editor'
    mainClassName = "com.kotcrab.fate.nanoha.editor.app.App"

    dependencies {
        compile project(":common")
        compile "no.tornado:tornadofx:1.7.15"
    }

    distributions {
        main {
            baseName = 'nanoha-script-editor'
        }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.7'
}
