buildscript {
    ext.kotlinVersion = '1.2.50'
    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
    }
}

subprojects {
    group 'com.kotcrab.fate'
    version = '1.0.0-SNAPSHOT'
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'kotlin'

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "https://oss.sonatype.org/content/repositories/releases/" }
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile) {
        kotlinOptions {
            jvmTarget = "1.8"
        }
    }
}

kotlin { experimental { coroutines 'enable' } }

project(':common') {
    dependencies {
        compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
        compile "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
        compile "org.jetbrains.kotlinx:kotlinx-coroutines-core:0.21.2"
        compile "com.kotcrab.kmips:kmips:1.2"
        compile "com.google.guava:guava:19.0"
        compile "com.google.code.gson:gson:2.8.0"
        compile "org.apache.commons:commons-exec:1.3"
    }
}

project(':fate') {
    dependencies {
        compile project(":common")
    }
}

project(':nanoha') {
    apply plugin: 'application'
    applicationName = 'nanoha-script-editor'
    mainClassName = "com.kotcrab.fate.nanoha.editor.app.App"

    dependencies {
        compile project(":common")
        compile "no.tornado:tornadofx:1.7.15"
    }

    distributions {
        main {
            baseName = 'nanoha-script-editor'
        }
    }
}

project(':pktools') {
    apply plugin: 'application'
    mainClassName = "com.kotcrab.fate.pktools.PkToolsCli"
    dependencies {
        compile project(":fate")
        compile "com.github.rvesse:airline:2.2.0"
    }

    task createLauncher {
        def extraDir = file("$buildDir/distExtra")
        outputs.dir extraDir
        doLast {
            extraDir.mkdirs()
            new File(extraDir, "pktools.bat").write('@echo off\r\n' +
                    'call "%~dp0/bin/pktools.bat" %*')
            new File(extraDir, "drag-and-drop extract.bat").write('@echo off\r\n' +
                    'call "%~dp0/bin/pktools.bat" extractDnD "%~1"\r\n' +
                    'echo Operation finished, press any key to close this window...\r\n' +
                    'pause>nul')
        }
    }

    distributions {
        main {
            contents {
                from(createLauncher)
            }
        }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.7'
}
